//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EnrollmentWorkflow.EventService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EventCode", Namespace="http://schemas.datacontract.org/2004/07/WorkItemService.Events")]
    public enum EventCode : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LoggedInFirstTime = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SaveContactInformation = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SubmitEnrollment = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SavePayerDetail = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SubmissionApproved = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NotificationSent = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        WelcomeEmailSent = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        FieldUpdated = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NoteAdded = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SiteCreated = 9,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        WorkItemStatusChange = 10,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        GoLiveChange = 11,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ProviderAdded = 12,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ProviderRemoved = 13,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PracticeAdded = 14,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PracticeUpdated = 15,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PracticePayerAdded = 16,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PracticePayerDetailAdded = 17,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        WorkFlowJobServiceRan = 18,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PayerOffHold = 19,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PortalEvent", Namespace="http://schemas.datacontract.org/2004/07/WorkItemService.Events")]
    [System.SerializableAttribute()]
    public partial class PortalEvent : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime EventDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MetaDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int WebUserIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime EventDate {
            get {
                return this.EventDateField;
            }
            set {
                if ((this.EventDateField.Equals(value) != true)) {
                    this.EventDateField = value;
                    this.RaisePropertyChanged("EventDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MetaData {
            get {
                return this.MetaDataField;
            }
            set {
                if ((object.ReferenceEquals(this.MetaDataField, value) != true)) {
                    this.MetaDataField = value;
                    this.RaisePropertyChanged("MetaData");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int WebUserId {
            get {
                return this.WebUserIdField;
            }
            set {
                if ((this.WebUserIdField.Equals(value) != true)) {
                    this.WebUserIdField = value;
                    this.RaisePropertyChanged("WebUserId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="EventService.IEventService")]
    public interface IEventService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/Add", ReplyAction="http://tempuri.org/IEventService/AddResponse")]
        void Add(int webUserId, bool isInternal, EnrollmentWorkflow.EventService.EventCode eventCode, string metadata);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/Add", ReplyAction="http://tempuri.org/IEventService/AddResponse")]
        System.Threading.Tasks.Task AddAsync(int webUserId, bool isInternal, EnrollmentWorkflow.EventService.EventCode eventCode, string metadata);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/AddForSite", ReplyAction="http://tempuri.org/IEventService/AddForSiteResponse")]
        void AddForSite(string siteId, bool isInternal, EnrollmentWorkflow.EventService.EventCode eventCode, string metadata);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/AddForSite", ReplyAction="http://tempuri.org/IEventService/AddForSiteResponse")]
        System.Threading.Tasks.Task AddForSiteAsync(string siteId, bool isInternal, EnrollmentWorkflow.EventService.EventCode eventCode, string metadata);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/GetLastOccurrence", ReplyAction="http://tempuri.org/IEventService/GetLastOccurrenceResponse")]
        System.Nullable<System.DateTime> GetLastOccurrence(string siteId, EnrollmentWorkflow.EventService.EventCode eventCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/GetLastOccurrence", ReplyAction="http://tempuri.org/IEventService/GetLastOccurrenceResponse")]
        System.Threading.Tasks.Task<System.Nullable<System.DateTime>> GetLastOccurrenceAsync(string siteId, EnrollmentWorkflow.EventService.EventCode eventCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/GetLastOccurrenceForSites", ReplyAction="http://tempuri.org/IEventService/GetLastOccurrenceForSitesResponse")]
        System.Collections.Generic.Dictionary<string, System.Nullable<System.DateTime>> GetLastOccurrenceForSites(string[] siteIds, EnrollmentWorkflow.EventService.EventCode eventCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/GetLastOccurrenceForSites", ReplyAction="http://tempuri.org/IEventService/GetLastOccurrenceForSitesResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, System.Nullable<System.DateTime>>> GetLastOccurrenceForSitesAsync(string[] siteIds, EnrollmentWorkflow.EventService.EventCode eventCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/GetMetaData", ReplyAction="http://tempuri.org/IEventService/GetMetaDataResponse")]
        EnrollmentWorkflow.EventService.PortalEvent[] GetMetaData(string siteId, EnrollmentWorkflow.EventService.EventCode eventCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/GetMetaData", ReplyAction="http://tempuri.org/IEventService/GetMetaDataResponse")]
        System.Threading.Tasks.Task<EnrollmentWorkflow.EventService.PortalEvent[]> GetMetaDataAsync(string siteId, EnrollmentWorkflow.EventService.EventCode eventCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/GetMetaDataForSites", ReplyAction="http://tempuri.org/IEventService/GetMetaDataForSitesResponse")]
        System.Collections.Generic.Dictionary<string, EnrollmentWorkflow.EventService.PortalEvent[]> GetMetaDataForSites(string[] siteIds, EnrollmentWorkflow.EventService.EventCode eventCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/GetMetaDataForSites", ReplyAction="http://tempuri.org/IEventService/GetMetaDataForSitesResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, EnrollmentWorkflow.EventService.PortalEvent[]>> GetMetaDataForSitesAsync(string[] siteIds, EnrollmentWorkflow.EventService.EventCode eventCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/GetWebUserId", ReplyAction="http://tempuri.org/IEventService/GetWebUserIdResponse")]
        int GetWebUserId(string siteId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEventService/GetWebUserId", ReplyAction="http://tempuri.org/IEventService/GetWebUserIdResponse")]
        System.Threading.Tasks.Task<int> GetWebUserIdAsync(string siteId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IEventServiceChannel : EnrollmentWorkflow.EventService.IEventService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EventServiceClient : System.ServiceModel.ClientBase<EnrollmentWorkflow.EventService.IEventService>, EnrollmentWorkflow.EventService.IEventService {
        
        public EventServiceClient() {
        }
        
        public EventServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public EventServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EventServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EventServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void Add(int webUserId, bool isInternal, EnrollmentWorkflow.EventService.EventCode eventCode, string metadata) {
            base.Channel.Add(webUserId, isInternal, eventCode, metadata);
        }
        
        public System.Threading.Tasks.Task AddAsync(int webUserId, bool isInternal, EnrollmentWorkflow.EventService.EventCode eventCode, string metadata) {
            return base.Channel.AddAsync(webUserId, isInternal, eventCode, metadata);
        }
        
        public void AddForSite(string siteId, bool isInternal, EnrollmentWorkflow.EventService.EventCode eventCode, string metadata) {
            base.Channel.AddForSite(siteId, isInternal, eventCode, metadata);
        }
        
        public System.Threading.Tasks.Task AddForSiteAsync(string siteId, bool isInternal, EnrollmentWorkflow.EventService.EventCode eventCode, string metadata) {
            return base.Channel.AddForSiteAsync(siteId, isInternal, eventCode, metadata);
        }
        
        public System.Nullable<System.DateTime> GetLastOccurrence(string siteId, EnrollmentWorkflow.EventService.EventCode eventCode) {
            return base.Channel.GetLastOccurrence(siteId, eventCode);
        }
        
        public System.Threading.Tasks.Task<System.Nullable<System.DateTime>> GetLastOccurrenceAsync(string siteId, EnrollmentWorkflow.EventService.EventCode eventCode) {
            return base.Channel.GetLastOccurrenceAsync(siteId, eventCode);
        }
        
        public System.Collections.Generic.Dictionary<string, System.Nullable<System.DateTime>> GetLastOccurrenceForSites(string[] siteIds, EnrollmentWorkflow.EventService.EventCode eventCode) {
            return base.Channel.GetLastOccurrenceForSites(siteIds, eventCode);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, System.Nullable<System.DateTime>>> GetLastOccurrenceForSitesAsync(string[] siteIds, EnrollmentWorkflow.EventService.EventCode eventCode) {
            return base.Channel.GetLastOccurrenceForSitesAsync(siteIds, eventCode);
        }
        
        public EnrollmentWorkflow.EventService.PortalEvent[] GetMetaData(string siteId, EnrollmentWorkflow.EventService.EventCode eventCode) {
            return base.Channel.GetMetaData(siteId, eventCode);
        }
        
        public System.Threading.Tasks.Task<EnrollmentWorkflow.EventService.PortalEvent[]> GetMetaDataAsync(string siteId, EnrollmentWorkflow.EventService.EventCode eventCode) {
            return base.Channel.GetMetaDataAsync(siteId, eventCode);
        }
        
        public System.Collections.Generic.Dictionary<string, EnrollmentWorkflow.EventService.PortalEvent[]> GetMetaDataForSites(string[] siteIds, EnrollmentWorkflow.EventService.EventCode eventCode) {
            return base.Channel.GetMetaDataForSites(siteIds, eventCode);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, EnrollmentWorkflow.EventService.PortalEvent[]>> GetMetaDataForSitesAsync(string[] siteIds, EnrollmentWorkflow.EventService.EventCode eventCode) {
            return base.Channel.GetMetaDataForSitesAsync(siteIds, eventCode);
        }
        
        public int GetWebUserId(string siteId) {
            return base.Channel.GetWebUserId(siteId);
        }
        
        public System.Threading.Tasks.Task<int> GetWebUserIdAsync(string siteId) {
            return base.Channel.GetWebUserIdAsync(siteId);
        }
    }
}
