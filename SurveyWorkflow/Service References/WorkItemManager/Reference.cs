//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EnrollmentWorkflow.WorkItemManager {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CreateWorkItem", Namespace="http://schemas.datacontract.org/2004/07/WorkItemService")]
    [System.SerializableAttribute()]
    public partial class CreateWorkItem : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ContractDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OfficeNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ProvidersSoldField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SiteIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long VendorNumberField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ContractDate {
            get {
                return this.ContractDateField;
            }
            set {
                if ((this.ContractDateField.Equals(value) != true)) {
                    this.ContractDateField = value;
                    this.RaisePropertyChanged("ContractDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OfficeName {
            get {
                return this.OfficeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.OfficeNameField, value) != true)) {
                    this.OfficeNameField = value;
                    this.RaisePropertyChanged("OfficeName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ProvidersSold {
            get {
                return this.ProvidersSoldField;
            }
            set {
                if ((this.ProvidersSoldField.Equals(value) != true)) {
                    this.ProvidersSoldField = value;
                    this.RaisePropertyChanged("ProvidersSold");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SiteId {
            get {
                return this.SiteIdField;
            }
            set {
                if ((object.ReferenceEquals(this.SiteIdField, value) != true)) {
                    this.SiteIdField = value;
                    this.RaisePropertyChanged("SiteId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long VendorNumber {
            get {
                return this.VendorNumberField;
            }
            set {
                if ((this.VendorNumberField.Equals(value) != true)) {
                    this.VendorNumberField = value;
                    this.RaisePropertyChanged("VendorNumber");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WorkItem", Namespace="http://schemas.datacontract.org/2004/07/WorkItemService")]
    [System.SerializableAttribute()]
    public partial class WorkItem : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> ClientSubmissionDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> ContractDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> CreatedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DaysToImplementField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DocCountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EcwGroupField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EcwProjectManagerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EnrollmentRepField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> EnrollmentSentDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int GoLiveChangesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> GoLiveDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> InstallDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string InstallTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> IntroDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> KickOffCallDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> LastContactedDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> ModifiedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ModifiedByField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> MovedOutOfImplementationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NotesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OfficeNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> PaperworkReceivedDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> PaperworkSentDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> ProductionDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ProvidersSoldField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> ReinstatedDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SiteAnalysisAttemptsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> SiteAnalysisDueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SiteIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> TAFReceivedDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> TargetDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> TestingDate1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> TestingDate2Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> TestingDate3Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> TestingDate4Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> TestingDate5Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> TestingDate6Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TestingRepField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string VendorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int VendorNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int WorkItemIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EnrollmentWorkflow.WorkItemManager.WorkItemStatus WorkItemStatusField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> ClientSubmissionDate {
            get {
                return this.ClientSubmissionDateField;
            }
            set {
                if ((this.ClientSubmissionDateField.Equals(value) != true)) {
                    this.ClientSubmissionDateField = value;
                    this.RaisePropertyChanged("ClientSubmissionDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> ContractDate {
            get {
                return this.ContractDateField;
            }
            set {
                if ((this.ContractDateField.Equals(value) != true)) {
                    this.ContractDateField = value;
                    this.RaisePropertyChanged("ContractDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> Created {
            get {
                return this.CreatedField;
            }
            set {
                if ((this.CreatedField.Equals(value) != true)) {
                    this.CreatedField = value;
                    this.RaisePropertyChanged("Created");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DaysToImplement {
            get {
                return this.DaysToImplementField;
            }
            set {
                if ((this.DaysToImplementField.Equals(value) != true)) {
                    this.DaysToImplementField = value;
                    this.RaisePropertyChanged("DaysToImplement");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DocCount {
            get {
                return this.DocCountField;
            }
            set {
                if ((this.DocCountField.Equals(value) != true)) {
                    this.DocCountField = value;
                    this.RaisePropertyChanged("DocCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EcwGroup {
            get {
                return this.EcwGroupField;
            }
            set {
                if ((object.ReferenceEquals(this.EcwGroupField, value) != true)) {
                    this.EcwGroupField = value;
                    this.RaisePropertyChanged("EcwGroup");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EcwProjectManager {
            get {
                return this.EcwProjectManagerField;
            }
            set {
                if ((object.ReferenceEquals(this.EcwProjectManagerField, value) != true)) {
                    this.EcwProjectManagerField = value;
                    this.RaisePropertyChanged("EcwProjectManager");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EnrollmentRep {
            get {
                return this.EnrollmentRepField;
            }
            set {
                if ((object.ReferenceEquals(this.EnrollmentRepField, value) != true)) {
                    this.EnrollmentRepField = value;
                    this.RaisePropertyChanged("EnrollmentRep");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> EnrollmentSentDate {
            get {
                return this.EnrollmentSentDateField;
            }
            set {
                if ((this.EnrollmentSentDateField.Equals(value) != true)) {
                    this.EnrollmentSentDateField = value;
                    this.RaisePropertyChanged("EnrollmentSentDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int GoLiveChanges {
            get {
                return this.GoLiveChangesField;
            }
            set {
                if ((this.GoLiveChangesField.Equals(value) != true)) {
                    this.GoLiveChangesField = value;
                    this.RaisePropertyChanged("GoLiveChanges");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> GoLiveDate {
            get {
                return this.GoLiveDateField;
            }
            set {
                if ((this.GoLiveDateField.Equals(value) != true)) {
                    this.GoLiveDateField = value;
                    this.RaisePropertyChanged("GoLiveDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> InstallDate {
            get {
                return this.InstallDateField;
            }
            set {
                if ((this.InstallDateField.Equals(value) != true)) {
                    this.InstallDateField = value;
                    this.RaisePropertyChanged("InstallDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string InstallType {
            get {
                return this.InstallTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.InstallTypeField, value) != true)) {
                    this.InstallTypeField = value;
                    this.RaisePropertyChanged("InstallType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> IntroDate {
            get {
                return this.IntroDateField;
            }
            set {
                if ((this.IntroDateField.Equals(value) != true)) {
                    this.IntroDateField = value;
                    this.RaisePropertyChanged("IntroDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsActive {
            get {
                return this.IsActiveField;
            }
            set {
                if ((this.IsActiveField.Equals(value) != true)) {
                    this.IsActiveField = value;
                    this.RaisePropertyChanged("IsActive");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> KickOffCallDate {
            get {
                return this.KickOffCallDateField;
            }
            set {
                if ((this.KickOffCallDateField.Equals(value) != true)) {
                    this.KickOffCallDateField = value;
                    this.RaisePropertyChanged("KickOffCallDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> LastContactedDate {
            get {
                return this.LastContactedDateField;
            }
            set {
                if ((this.LastContactedDateField.Equals(value) != true)) {
                    this.LastContactedDateField = value;
                    this.RaisePropertyChanged("LastContactedDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> Modified {
            get {
                return this.ModifiedField;
            }
            set {
                if ((this.ModifiedField.Equals(value) != true)) {
                    this.ModifiedField = value;
                    this.RaisePropertyChanged("Modified");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ModifiedBy {
            get {
                return this.ModifiedByField;
            }
            set {
                if ((object.ReferenceEquals(this.ModifiedByField, value) != true)) {
                    this.ModifiedByField = value;
                    this.RaisePropertyChanged("ModifiedBy");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> MovedOutOfImplementation {
            get {
                return this.MovedOutOfImplementationField;
            }
            set {
                if ((this.MovedOutOfImplementationField.Equals(value) != true)) {
                    this.MovedOutOfImplementationField = value;
                    this.RaisePropertyChanged("MovedOutOfImplementation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Notes {
            get {
                return this.NotesField;
            }
            set {
                if ((object.ReferenceEquals(this.NotesField, value) != true)) {
                    this.NotesField = value;
                    this.RaisePropertyChanged("Notes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OfficeName {
            get {
                return this.OfficeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.OfficeNameField, value) != true)) {
                    this.OfficeNameField = value;
                    this.RaisePropertyChanged("OfficeName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> PaperworkReceivedDate {
            get {
                return this.PaperworkReceivedDateField;
            }
            set {
                if ((this.PaperworkReceivedDateField.Equals(value) != true)) {
                    this.PaperworkReceivedDateField = value;
                    this.RaisePropertyChanged("PaperworkReceivedDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> PaperworkSentDate {
            get {
                return this.PaperworkSentDateField;
            }
            set {
                if ((this.PaperworkSentDateField.Equals(value) != true)) {
                    this.PaperworkSentDateField = value;
                    this.RaisePropertyChanged("PaperworkSentDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> ProductionDate {
            get {
                return this.ProductionDateField;
            }
            set {
                if ((this.ProductionDateField.Equals(value) != true)) {
                    this.ProductionDateField = value;
                    this.RaisePropertyChanged("ProductionDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ProvidersSold {
            get {
                return this.ProvidersSoldField;
            }
            set {
                if ((this.ProvidersSoldField.Equals(value) != true)) {
                    this.ProvidersSoldField = value;
                    this.RaisePropertyChanged("ProvidersSold");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> ReinstatedDate {
            get {
                return this.ReinstatedDateField;
            }
            set {
                if ((this.ReinstatedDateField.Equals(value) != true)) {
                    this.ReinstatedDateField = value;
                    this.RaisePropertyChanged("ReinstatedDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SiteAnalysisAttempts {
            get {
                return this.SiteAnalysisAttemptsField;
            }
            set {
                if ((this.SiteAnalysisAttemptsField.Equals(value) != true)) {
                    this.SiteAnalysisAttemptsField = value;
                    this.RaisePropertyChanged("SiteAnalysisAttempts");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> SiteAnalysisDue {
            get {
                return this.SiteAnalysisDueField;
            }
            set {
                if ((this.SiteAnalysisDueField.Equals(value) != true)) {
                    this.SiteAnalysisDueField = value;
                    this.RaisePropertyChanged("SiteAnalysisDue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SiteId {
            get {
                return this.SiteIdField;
            }
            set {
                if ((object.ReferenceEquals(this.SiteIdField, value) != true)) {
                    this.SiteIdField = value;
                    this.RaisePropertyChanged("SiteId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> TAFReceivedDate {
            get {
                return this.TAFReceivedDateField;
            }
            set {
                if ((this.TAFReceivedDateField.Equals(value) != true)) {
                    this.TAFReceivedDateField = value;
                    this.RaisePropertyChanged("TAFReceivedDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> TargetDate {
            get {
                return this.TargetDateField;
            }
            set {
                if ((this.TargetDateField.Equals(value) != true)) {
                    this.TargetDateField = value;
                    this.RaisePropertyChanged("TargetDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> TestingDate1 {
            get {
                return this.TestingDate1Field;
            }
            set {
                if ((this.TestingDate1Field.Equals(value) != true)) {
                    this.TestingDate1Field = value;
                    this.RaisePropertyChanged("TestingDate1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> TestingDate2 {
            get {
                return this.TestingDate2Field;
            }
            set {
                if ((this.TestingDate2Field.Equals(value) != true)) {
                    this.TestingDate2Field = value;
                    this.RaisePropertyChanged("TestingDate2");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> TestingDate3 {
            get {
                return this.TestingDate3Field;
            }
            set {
                if ((this.TestingDate3Field.Equals(value) != true)) {
                    this.TestingDate3Field = value;
                    this.RaisePropertyChanged("TestingDate3");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> TestingDate4 {
            get {
                return this.TestingDate4Field;
            }
            set {
                if ((this.TestingDate4Field.Equals(value) != true)) {
                    this.TestingDate4Field = value;
                    this.RaisePropertyChanged("TestingDate4");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> TestingDate5 {
            get {
                return this.TestingDate5Field;
            }
            set {
                if ((this.TestingDate5Field.Equals(value) != true)) {
                    this.TestingDate5Field = value;
                    this.RaisePropertyChanged("TestingDate5");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> TestingDate6 {
            get {
                return this.TestingDate6Field;
            }
            set {
                if ((this.TestingDate6Field.Equals(value) != true)) {
                    this.TestingDate6Field = value;
                    this.RaisePropertyChanged("TestingDate6");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TestingRep {
            get {
                return this.TestingRepField;
            }
            set {
                if ((object.ReferenceEquals(this.TestingRepField, value) != true)) {
                    this.TestingRepField = value;
                    this.RaisePropertyChanged("TestingRep");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Vendor {
            get {
                return this.VendorField;
            }
            set {
                if ((object.ReferenceEquals(this.VendorField, value) != true)) {
                    this.VendorField = value;
                    this.RaisePropertyChanged("Vendor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int VendorNumber {
            get {
                return this.VendorNumberField;
            }
            set {
                if ((this.VendorNumberField.Equals(value) != true)) {
                    this.VendorNumberField = value;
                    this.RaisePropertyChanged("VendorNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int WorkItemId {
            get {
                return this.WorkItemIdField;
            }
            set {
                if ((this.WorkItemIdField.Equals(value) != true)) {
                    this.WorkItemIdField = value;
                    this.RaisePropertyChanged("WorkItemId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EnrollmentWorkflow.WorkItemManager.WorkItemStatus WorkItemStatus {
            get {
                return this.WorkItemStatusField;
            }
            set {
                if ((this.WorkItemStatusField.Equals(value) != true)) {
                    this.WorkItemStatusField = value;
                    this.RaisePropertyChanged("WorkItemStatus");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WorkItemStatus", Namespace="http://schemas.datacontract.org/2004/07/WorkItemService")]
    public enum WorkItemStatus : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PendingInitialLogin = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PendingSubmission = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PendingTPSReview = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        HoldForFutureGoLiveDate = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        ProcessingEnrollment = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PendingPaperwork = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Testing = 6,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        WaitingClientTestFile = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        WaitingVendorTestFile = 8,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PendingSubsequentFile = 9,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Live = 10,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PendingContract = 11,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WorkItemManager.IWorkItemService")]
    public interface IWorkItemService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkItemService/CreateWorkItem", ReplyAction="http://tempuri.org/IWorkItemService/CreateWorkItemResponse")]
        int CreateWorkItem([System.ServiceModel.MessageParameterAttribute(Name="createWorkItem")] EnrollmentWorkflow.WorkItemManager.CreateWorkItem createWorkItem1);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkItemService/CreateWorkItem", ReplyAction="http://tempuri.org/IWorkItemService/CreateWorkItemResponse")]
        System.Threading.Tasks.Task<int> CreateWorkItemAsync(EnrollmentWorkflow.WorkItemManager.CreateWorkItem createWorkItem);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkItemService/CreateWorkItemForProductSite", ReplyAction="http://tempuri.org/IWorkItemService/CreateWorkItemForProductSiteResponse")]
        long CreateWorkItemForProductSite(EnrollmentWorkflow.WorkItemManager.WorkItem workItemData, string modifiedBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkItemService/CreateWorkItemForProductSite", ReplyAction="http://tempuri.org/IWorkItemService/CreateWorkItemForProductSiteResponse")]
        System.Threading.Tasks.Task<long> CreateWorkItemForProductSiteAsync(EnrollmentWorkflow.WorkItemManager.WorkItem workItemData, string modifiedBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkItemService/SendWelcomeEmail", ReplyAction="http://tempuri.org/IWorkItemService/SendWelcomeEmailResponse")]
        void SendWelcomeEmail(string siteId, string officeName, string email, long vendorNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkItemService/SendWelcomeEmail", ReplyAction="http://tempuri.org/IWorkItemService/SendWelcomeEmailResponse")]
        System.Threading.Tasks.Task SendWelcomeEmailAsync(string siteId, string officeName, string email, long vendorNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkItemService/SetStatus", ReplyAction="http://tempuri.org/IWorkItemService/SetStatusResponse")]
        void SetStatus(string siteId, EnrollmentWorkflow.WorkItemManager.WorkItemStatus status, string modifiedBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkItemService/SetStatus", ReplyAction="http://tempuri.org/IWorkItemService/SetStatusResponse")]
        System.Threading.Tasks.Task SetStatusAsync(string siteId, EnrollmentWorkflow.WorkItemManager.WorkItemStatus status, string modifiedBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkItemService/GetWorkItem", ReplyAction="http://tempuri.org/IWorkItemService/GetWorkItemResponse")]
        EnrollmentWorkflow.WorkItemManager.WorkItem GetWorkItem(int workItemId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkItemService/GetWorkItem", ReplyAction="http://tempuri.org/IWorkItemService/GetWorkItemResponse")]
        System.Threading.Tasks.Task<EnrollmentWorkflow.WorkItemManager.WorkItem> GetWorkItemAsync(int workItemId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkItemService/GetAllWorkItems", ReplyAction="http://tempuri.org/IWorkItemService/GetAllWorkItemsResponse")]
        EnrollmentWorkflow.WorkItemManager.WorkItem[] GetAllWorkItems();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkItemService/GetAllWorkItems", ReplyAction="http://tempuri.org/IWorkItemService/GetAllWorkItemsResponse")]
        System.Threading.Tasks.Task<EnrollmentWorkflow.WorkItemManager.WorkItem[]> GetAllWorkItemsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkItemService/GetWorkItems", ReplyAction="http://tempuri.org/IWorkItemService/GetWorkItemsResponse")]
        EnrollmentWorkflow.WorkItemManager.WorkItem[] GetWorkItems(string repName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkItemService/GetWorkItems", ReplyAction="http://tempuri.org/IWorkItemService/GetWorkItemsResponse")]
        System.Threading.Tasks.Task<EnrollmentWorkflow.WorkItemManager.WorkItem[]> GetWorkItemsAsync(string repName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkItemService/UpdateWorkItem", ReplyAction="http://tempuri.org/IWorkItemService/UpdateWorkItemResponse")]
        void UpdateWorkItem(EnrollmentWorkflow.WorkItemManager.WorkItem workItemData, string modifiedBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkItemService/UpdateWorkItem", ReplyAction="http://tempuri.org/IWorkItemService/UpdateWorkItemResponse")]
        System.Threading.Tasks.Task UpdateWorkItemAsync(EnrollmentWorkflow.WorkItemManager.WorkItem workItemData, string modifiedBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkItemService/AssignWorkItemToEnrollmentRep", ReplyAction="http://tempuri.org/IWorkItemService/AssignWorkItemToEnrollmentRepResponse")]
        bool AssignWorkItemToEnrollmentRep(int workItemId, string enrollmentRep, string modifiedBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkItemService/AssignWorkItemToEnrollmentRep", ReplyAction="http://tempuri.org/IWorkItemService/AssignWorkItemToEnrollmentRepResponse")]
        System.Threading.Tasks.Task<bool> AssignWorkItemToEnrollmentRepAsync(int workItemId, string enrollmentRep, string modifiedBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkItemService/AssignWorkItemToTestingRep", ReplyAction="http://tempuri.org/IWorkItemService/AssignWorkItemToTestingRepResponse")]
        bool AssignWorkItemToTestingRep(int workItemId, string testingRep, string modifiedBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkItemService/AssignWorkItemToTestingRep", ReplyAction="http://tempuri.org/IWorkItemService/AssignWorkItemToTestingRepResponse")]
        System.Threading.Tasks.Task<bool> AssignWorkItemToTestingRepAsync(int workItemId, string testingRep, string modifiedBy);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkItemService/IsBetaSite", ReplyAction="http://tempuri.org/IWorkItemService/IsBetaSiteResponse")]
        bool IsBetaSite(string siteId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkItemService/IsBetaSite", ReplyAction="http://tempuri.org/IWorkItemService/IsBetaSiteResponse")]
        System.Threading.Tasks.Task<bool> IsBetaSiteAsync(string siteId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkItemService/GetProductionDate", ReplyAction="http://tempuri.org/IWorkItemService/GetProductionDateResponse")]
        System.Nullable<System.DateTime> GetProductionDate(string siteId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkItemService/GetProductionDate", ReplyAction="http://tempuri.org/IWorkItemService/GetProductionDateResponse")]
        System.Threading.Tasks.Task<System.Nullable<System.DateTime>> GetProductionDateAsync(string siteId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkItemService/GetProductionDateForSites", ReplyAction="http://tempuri.org/IWorkItemService/GetProductionDateForSitesResponse")]
        System.Collections.Generic.Dictionary<string, System.Nullable<System.DateTime>> GetProductionDateForSites(string[] siteIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkItemService/GetProductionDateForSites", ReplyAction="http://tempuri.org/IWorkItemService/GetProductionDateForSitesResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, System.Nullable<System.DateTime>>> GetProductionDateForSitesAsync(string[] siteIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkItemService/GetNaCompleteDate", ReplyAction="http://tempuri.org/IWorkItemService/GetNaCompleteDateResponse")]
        System.Nullable<System.DateTime> GetNaCompleteDate(string siteId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkItemService/GetNaCompleteDate", ReplyAction="http://tempuri.org/IWorkItemService/GetNaCompleteDateResponse")]
        System.Threading.Tasks.Task<System.Nullable<System.DateTime>> GetNaCompleteDateAsync(string siteId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkItemService/SetProductionDate", ReplyAction="http://tempuri.org/IWorkItemService/SetProductionDateResponse")]
        void SetProductionDate(string siteId, System.DateTime proddate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkItemService/SetProductionDate", ReplyAction="http://tempuri.org/IWorkItemService/SetProductionDateResponse")]
        System.Threading.Tasks.Task SetProductionDateAsync(string siteId, System.DateTime proddate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkItemService/GetOfficeName", ReplyAction="http://tempuri.org/IWorkItemService/GetOfficeNameResponse")]
        string GetOfficeName(string siteId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkItemService/GetOfficeName", ReplyAction="http://tempuri.org/IWorkItemService/GetOfficeNameResponse")]
        System.Threading.Tasks.Task<string> GetOfficeNameAsync(string siteId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkItemService/GetVendorName", ReplyAction="http://tempuri.org/IWorkItemService/GetVendorNameResponse")]
        string GetVendorName(int vendorNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkItemService/GetVendorName", ReplyAction="http://tempuri.org/IWorkItemService/GetVendorNameResponse")]
        System.Threading.Tasks.Task<string> GetVendorNameAsync(int vendorNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkItemService/GetRepEmail", ReplyAction="http://tempuri.org/IWorkItemService/GetRepEmailResponse")]
        string GetRepEmail(string principalUsername);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkItemService/GetRepEmail", ReplyAction="http://tempuri.org/IWorkItemService/GetRepEmailResponse")]
        System.Threading.Tasks.Task<string> GetRepEmailAsync(string principalUsername);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkItemService/UpdateRepEmail", ReplyAction="http://tempuri.org/IWorkItemService/UpdateRepEmailResponse")]
        void UpdateRepEmail(string principalUsername, string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkItemService/UpdateRepEmail", ReplyAction="http://tempuri.org/IWorkItemService/UpdateRepEmailResponse")]
        System.Threading.Tasks.Task UpdateRepEmailAsync(string principalUsername, string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkItemService/UpdateWorkItemStatus", ReplyAction="http://tempuri.org/IWorkItemService/UpdateWorkItemStatusResponse")]
        void UpdateWorkItemStatus(long workItemId, bool isActive);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkItemService/UpdateWorkItemStatus", ReplyAction="http://tempuri.org/IWorkItemService/UpdateWorkItemStatusResponse")]
        System.Threading.Tasks.Task UpdateWorkItemStatusAsync(long workItemId, bool isActive);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkItemService/GetVendors", ReplyAction="http://tempuri.org/IWorkItemService/GetVendorsResponse")]
        System.Collections.Generic.Dictionary<int, string> GetVendors();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWorkItemService/GetVendors", ReplyAction="http://tempuri.org/IWorkItemService/GetVendorsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<int, string>> GetVendorsAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IWorkItemServiceChannel : EnrollmentWorkflow.WorkItemManager.IWorkItemService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WorkItemServiceClient : System.ServiceModel.ClientBase<EnrollmentWorkflow.WorkItemManager.IWorkItemService>, EnrollmentWorkflow.WorkItemManager.IWorkItemService {
        
        public WorkItemServiceClient() {
        }
        
        public WorkItemServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public WorkItemServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WorkItemServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WorkItemServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int CreateWorkItem(EnrollmentWorkflow.WorkItemManager.CreateWorkItem createWorkItem1) {
            return base.Channel.CreateWorkItem(createWorkItem1);
        }
        
        public System.Threading.Tasks.Task<int> CreateWorkItemAsync(EnrollmentWorkflow.WorkItemManager.CreateWorkItem createWorkItem) {
            return base.Channel.CreateWorkItemAsync(createWorkItem);
        }
        
        public long CreateWorkItemForProductSite(EnrollmentWorkflow.WorkItemManager.WorkItem workItemData, string modifiedBy) {
            return base.Channel.CreateWorkItemForProductSite(workItemData, modifiedBy);
        }
        
        public System.Threading.Tasks.Task<long> CreateWorkItemForProductSiteAsync(EnrollmentWorkflow.WorkItemManager.WorkItem workItemData, string modifiedBy) {
            return base.Channel.CreateWorkItemForProductSiteAsync(workItemData, modifiedBy);
        }
        
        public void SendWelcomeEmail(string siteId, string officeName, string email, long vendorNumber) {
            base.Channel.SendWelcomeEmail(siteId, officeName, email, vendorNumber);
        }
        
        public System.Threading.Tasks.Task SendWelcomeEmailAsync(string siteId, string officeName, string email, long vendorNumber) {
            return base.Channel.SendWelcomeEmailAsync(siteId, officeName, email, vendorNumber);
        }
        
        public void SetStatus(string siteId, EnrollmentWorkflow.WorkItemManager.WorkItemStatus status, string modifiedBy) {
            base.Channel.SetStatus(siteId, status, modifiedBy);
        }
        
        public System.Threading.Tasks.Task SetStatusAsync(string siteId, EnrollmentWorkflow.WorkItemManager.WorkItemStatus status, string modifiedBy) {
            return base.Channel.SetStatusAsync(siteId, status, modifiedBy);
        }
        
        public EnrollmentWorkflow.WorkItemManager.WorkItem GetWorkItem(int workItemId) {
            return base.Channel.GetWorkItem(workItemId);
        }
        
        public System.Threading.Tasks.Task<EnrollmentWorkflow.WorkItemManager.WorkItem> GetWorkItemAsync(int workItemId) {
            return base.Channel.GetWorkItemAsync(workItemId);
        }
        
        public EnrollmentWorkflow.WorkItemManager.WorkItem[] GetAllWorkItems() {
            return base.Channel.GetAllWorkItems();
        }
        
        public System.Threading.Tasks.Task<EnrollmentWorkflow.WorkItemManager.WorkItem[]> GetAllWorkItemsAsync() {
            return base.Channel.GetAllWorkItemsAsync();
        }
        
        public EnrollmentWorkflow.WorkItemManager.WorkItem[] GetWorkItems(string repName) {
            return base.Channel.GetWorkItems(repName);
        }
        
        public System.Threading.Tasks.Task<EnrollmentWorkflow.WorkItemManager.WorkItem[]> GetWorkItemsAsync(string repName) {
            return base.Channel.GetWorkItemsAsync(repName);
        }
        
        public void UpdateWorkItem(EnrollmentWorkflow.WorkItemManager.WorkItem workItemData, string modifiedBy) {
            base.Channel.UpdateWorkItem(workItemData, modifiedBy);
        }
        
        public System.Threading.Tasks.Task UpdateWorkItemAsync(EnrollmentWorkflow.WorkItemManager.WorkItem workItemData, string modifiedBy) {
            return base.Channel.UpdateWorkItemAsync(workItemData, modifiedBy);
        }
        
        public bool AssignWorkItemToEnrollmentRep(int workItemId, string enrollmentRep, string modifiedBy) {
            return base.Channel.AssignWorkItemToEnrollmentRep(workItemId, enrollmentRep, modifiedBy);
        }
        
        public System.Threading.Tasks.Task<bool> AssignWorkItemToEnrollmentRepAsync(int workItemId, string enrollmentRep, string modifiedBy) {
            return base.Channel.AssignWorkItemToEnrollmentRepAsync(workItemId, enrollmentRep, modifiedBy);
        }
        
        public bool AssignWorkItemToTestingRep(int workItemId, string testingRep, string modifiedBy) {
            return base.Channel.AssignWorkItemToTestingRep(workItemId, testingRep, modifiedBy);
        }
        
        public System.Threading.Tasks.Task<bool> AssignWorkItemToTestingRepAsync(int workItemId, string testingRep, string modifiedBy) {
            return base.Channel.AssignWorkItemToTestingRepAsync(workItemId, testingRep, modifiedBy);
        }
        
        public bool IsBetaSite(string siteId) {
            return base.Channel.IsBetaSite(siteId);
        }
        
        public System.Threading.Tasks.Task<bool> IsBetaSiteAsync(string siteId) {
            return base.Channel.IsBetaSiteAsync(siteId);
        }
        
        public System.Nullable<System.DateTime> GetProductionDate(string siteId) {
            return base.Channel.GetProductionDate(siteId);
        }
        
        public System.Threading.Tasks.Task<System.Nullable<System.DateTime>> GetProductionDateAsync(string siteId) {
            return base.Channel.GetProductionDateAsync(siteId);
        }
        
        public System.Collections.Generic.Dictionary<string, System.Nullable<System.DateTime>> GetProductionDateForSites(string[] siteIds) {
            return base.Channel.GetProductionDateForSites(siteIds);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, System.Nullable<System.DateTime>>> GetProductionDateForSitesAsync(string[] siteIds) {
            return base.Channel.GetProductionDateForSitesAsync(siteIds);
        }
        
        public System.Nullable<System.DateTime> GetNaCompleteDate(string siteId) {
            return base.Channel.GetNaCompleteDate(siteId);
        }
        
        public System.Threading.Tasks.Task<System.Nullable<System.DateTime>> GetNaCompleteDateAsync(string siteId) {
            return base.Channel.GetNaCompleteDateAsync(siteId);
        }
        
        public void SetProductionDate(string siteId, System.DateTime proddate) {
            base.Channel.SetProductionDate(siteId, proddate);
        }
        
        public System.Threading.Tasks.Task SetProductionDateAsync(string siteId, System.DateTime proddate) {
            return base.Channel.SetProductionDateAsync(siteId, proddate);
        }
        
        public string GetOfficeName(string siteId) {
            return base.Channel.GetOfficeName(siteId);
        }
        
        public System.Threading.Tasks.Task<string> GetOfficeNameAsync(string siteId) {
            return base.Channel.GetOfficeNameAsync(siteId);
        }
        
        public string GetVendorName(int vendorNumber) {
            return base.Channel.GetVendorName(vendorNumber);
        }
        
        public System.Threading.Tasks.Task<string> GetVendorNameAsync(int vendorNumber) {
            return base.Channel.GetVendorNameAsync(vendorNumber);
        }
        
        public string GetRepEmail(string principalUsername) {
            return base.Channel.GetRepEmail(principalUsername);
        }
        
        public System.Threading.Tasks.Task<string> GetRepEmailAsync(string principalUsername) {
            return base.Channel.GetRepEmailAsync(principalUsername);
        }
        
        public void UpdateRepEmail(string principalUsername, string email) {
            base.Channel.UpdateRepEmail(principalUsername, email);
        }
        
        public System.Threading.Tasks.Task UpdateRepEmailAsync(string principalUsername, string email) {
            return base.Channel.UpdateRepEmailAsync(principalUsername, email);
        }
        
        public void UpdateWorkItemStatus(long workItemId, bool isActive) {
            base.Channel.UpdateWorkItemStatus(workItemId, isActive);
        }
        
        public System.Threading.Tasks.Task UpdateWorkItemStatusAsync(long workItemId, bool isActive) {
            return base.Channel.UpdateWorkItemStatusAsync(workItemId, isActive);
        }
        
        public System.Collections.Generic.Dictionary<int, string> GetVendors() {
            return base.Channel.GetVendors();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<int, string>> GetVendorsAsync() {
            return base.Channel.GetVendorsAsync();
        }
    }
}
