//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EnrollmentWorkflow.PayerManager {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PayerNotes", Namespace="http://schemas.datacontract.org/2004/07/EnrollmentService.Domain.Payer")]
    [System.SerializableAttribute()]
    public partial class PayerNotes : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PayerListIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long PracticeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProviderIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PayerListId {
            get {
                return this.PayerListIdField;
            }
            set {
                if ((this.PayerListIdField.Equals(value) != true)) {
                    this.PayerListIdField = value;
                    this.RaisePropertyChanged("PayerListId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long PracticeId {
            get {
                return this.PracticeIdField;
            }
            set {
                if ((this.PracticeIdField.Equals(value) != true)) {
                    this.PracticeIdField = value;
                    this.RaisePropertyChanged("PracticeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProviderId {
            get {
                return this.ProviderIdField;
            }
            set {
                if ((object.ReferenceEquals(this.ProviderIdField, value) != true)) {
                    this.ProviderIdField = value;
                    this.RaisePropertyChanged("ProviderId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Payer", Namespace="http://schemas.datacontract.org/2004/07/EnrollmentService.Domain.Payer")]
    [System.SerializableAttribute()]
    public partial class Payer : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ClaimTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ContactNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ContactPhoneNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmcTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool OffersRemitsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PayerIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] ServiceStatesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ClaimType {
            get {
                return this.ClaimTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.ClaimTypeField, value) != true)) {
                    this.ClaimTypeField = value;
                    this.RaisePropertyChanged("ClaimType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ContactName {
            get {
                return this.ContactNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ContactNameField, value) != true)) {
                    this.ContactNameField = value;
                    this.RaisePropertyChanged("ContactName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ContactPhoneNumber {
            get {
                return this.ContactPhoneNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.ContactPhoneNumberField, value) != true)) {
                    this.ContactPhoneNumberField = value;
                    this.RaisePropertyChanged("ContactPhoneNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EmcType {
            get {
                return this.EmcTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.EmcTypeField, value) != true)) {
                    this.EmcTypeField = value;
                    this.RaisePropertyChanged("EmcType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool OffersRemits {
            get {
                return this.OffersRemitsField;
            }
            set {
                if ((this.OffersRemitsField.Equals(value) != true)) {
                    this.OffersRemitsField = value;
                    this.RaisePropertyChanged("OffersRemits");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PayerId {
            get {
                return this.PayerIdField;
            }
            set {
                if ((object.ReferenceEquals(this.PayerIdField, value) != true)) {
                    this.PayerIdField = value;
                    this.RaisePropertyChanged("PayerId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] ServiceStates {
            get {
                return this.ServiceStatesField;
            }
            set {
                if ((object.ReferenceEquals(this.ServiceStatesField, value) != true)) {
                    this.ServiceStatesField = value;
                    this.RaisePropertyChanged("ServiceStates");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PracticePayerDetail", Namespace="http://schemas.datacontract.org/2004/07/EnrollmentService.Domain.Payer")]
    [System.SerializableAttribute()]
    public partial class PracticePayerDetail : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BillingNPIField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ClaimTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ClaimsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool NeedsProviderIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NoteProviderIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool OffersRemitsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool OnHoldField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PayerIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long PracticeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProviderIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private EnrollmentWorkflow.PayerManager.ProviderIdType ProviderIdTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool RemitsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TaxIdorSSNField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string officeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BillingNPI {
            get {
                return this.BillingNPIField;
            }
            set {
                if ((object.ReferenceEquals(this.BillingNPIField, value) != true)) {
                    this.BillingNPIField = value;
                    this.RaisePropertyChanged("BillingNPI");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ClaimType {
            get {
                return this.ClaimTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.ClaimTypeField, value) != true)) {
                    this.ClaimTypeField = value;
                    this.RaisePropertyChanged("ClaimType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Claims {
            get {
                return this.ClaimsField;
            }
            set {
                if ((this.ClaimsField.Equals(value) != true)) {
                    this.ClaimsField = value;
                    this.RaisePropertyChanged("Claims");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool NeedsProviderId {
            get {
                return this.NeedsProviderIdField;
            }
            set {
                if ((this.NeedsProviderIdField.Equals(value) != true)) {
                    this.NeedsProviderIdField = value;
                    this.RaisePropertyChanged("NeedsProviderId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NoteProviderId {
            get {
                return this.NoteProviderIdField;
            }
            set {
                if ((object.ReferenceEquals(this.NoteProviderIdField, value) != true)) {
                    this.NoteProviderIdField = value;
                    this.RaisePropertyChanged("NoteProviderId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool OffersRemits {
            get {
                return this.OffersRemitsField;
            }
            set {
                if ((this.OffersRemitsField.Equals(value) != true)) {
                    this.OffersRemitsField = value;
                    this.RaisePropertyChanged("OffersRemits");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool OnHold {
            get {
                return this.OnHoldField;
            }
            set {
                if ((this.OnHoldField.Equals(value) != true)) {
                    this.OnHoldField = value;
                    this.RaisePropertyChanged("OnHold");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PayerId {
            get {
                return this.PayerIdField;
            }
            set {
                if ((object.ReferenceEquals(this.PayerIdField, value) != true)) {
                    this.PayerIdField = value;
                    this.RaisePropertyChanged("PayerId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long PracticeId {
            get {
                return this.PracticeIdField;
            }
            set {
                if ((this.PracticeIdField.Equals(value) != true)) {
                    this.PracticeIdField = value;
                    this.RaisePropertyChanged("PracticeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProviderId {
            get {
                return this.ProviderIdField;
            }
            set {
                if ((object.ReferenceEquals(this.ProviderIdField, value) != true)) {
                    this.ProviderIdField = value;
                    this.RaisePropertyChanged("ProviderId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public EnrollmentWorkflow.PayerManager.ProviderIdType ProviderIdType {
            get {
                return this.ProviderIdTypeField;
            }
            set {
                if ((this.ProviderIdTypeField.Equals(value) != true)) {
                    this.ProviderIdTypeField = value;
                    this.RaisePropertyChanged("ProviderIdType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Remits {
            get {
                return this.RemitsField;
            }
            set {
                if ((this.RemitsField.Equals(value) != true)) {
                    this.RemitsField = value;
                    this.RaisePropertyChanged("Remits");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TaxIdorSSN {
            get {
                return this.TaxIdorSSNField;
            }
            set {
                if ((object.ReferenceEquals(this.TaxIdorSSNField, value) != true)) {
                    this.TaxIdorSSNField = value;
                    this.RaisePropertyChanged("TaxIdorSSN");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string office {
            get {
                return this.officeField;
            }
            set {
                if ((object.ReferenceEquals(this.officeField, value) != true)) {
                    this.officeField = value;
                    this.RaisePropertyChanged("office");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ProviderIdType", Namespace="http://schemas.datacontract.org/2004/07/EnrollmentService.Enums")]
    public enum ProviderIdType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NotRequired = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Group = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Individual = 2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="PayerManager.IPayerManager")]
    public interface IPayerManager {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPayerManager/AddPracticePayer", ReplyAction="http://tempuri.org/IPayerManager/AddPracticePayerResponse")]
        void AddPracticePayer(string siteId, long practiceId, long payerListIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPayerManager/AddPracticePayer", ReplyAction="http://tempuri.org/IPayerManager/AddPracticePayerResponse")]
        System.Threading.Tasks.Task AddPracticePayerAsync(string siteId, long practiceId, long payerListIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPayerManager/AddPayerNotes", ReplyAction="http://tempuri.org/IPayerManager/AddPayerNotesResponse")]
        void AddPayerNotes(EnrollmentWorkflow.PayerManager.PayerNotes payerNotes);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPayerManager/AddPayerNotes", ReplyAction="http://tempuri.org/IPayerManager/AddPayerNotesResponse")]
        System.Threading.Tasks.Task AddPayerNotesAsync(EnrollmentWorkflow.PayerManager.PayerNotes payerNotes);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPayerManager/RemovePracticePayer", ReplyAction="http://tempuri.org/IPayerManager/RemovePracticePayerResponse")]
        void RemovePracticePayer(string siteId, long practiceId, long payerListId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPayerManager/RemovePracticePayer", ReplyAction="http://tempuri.org/IPayerManager/RemovePracticePayerResponse")]
        System.Threading.Tasks.Task RemovePracticePayerAsync(string siteId, long practiceId, long payerListId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPayerManager/GetPayerListData", ReplyAction="http://tempuri.org/IPayerManager/GetPayerListDataResponse")]
        EnrollmentWorkflow.PayerManager.Payer[] GetPayerListData(string formType, string keywordFilter, string stateFilter, int pageNum, int numrows);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPayerManager/GetPayerListData", ReplyAction="http://tempuri.org/IPayerManager/GetPayerListDataResponse")]
        System.Threading.Tasks.Task<EnrollmentWorkflow.PayerManager.Payer[]> GetPayerListDataAsync(string formType, string keywordFilter, string stateFilter, int pageNum, int numrows);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPayerManager/GetPracticePayerInfoForPracticeId", ReplyAction="http://tempuri.org/IPayerManager/GetPracticePayerInfoForPracticeIdResponse")]
        long[] GetPracticePayerInfoForPracticeId(long practiceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPayerManager/GetPracticePayerInfoForPracticeId", ReplyAction="http://tempuri.org/IPayerManager/GetPracticePayerInfoForPracticeIdResponse")]
        System.Threading.Tasks.Task<long[]> GetPracticePayerInfoForPracticeIdAsync(long practiceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPayerManager/AddPracticePayerDetail", ReplyAction="http://tempuri.org/IPayerManager/AddPracticePayerDetailResponse")]
        void AddPracticePayerDetail(string userName, string siteId, long practiceId, EnrollmentWorkflow.PayerManager.PracticePayerDetail[] payerdetails);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPayerManager/AddPracticePayerDetail", ReplyAction="http://tempuri.org/IPayerManager/AddPracticePayerDetailResponse")]
        System.Threading.Tasks.Task AddPracticePayerDetailAsync(string userName, string siteId, long practiceId, EnrollmentWorkflow.PayerManager.PracticePayerDetail[] payerdetails);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPayerManager/GetPracticePayerDetailForPracticeId", ReplyAction="http://tempuri.org/IPayerManager/GetPracticePayerDetailForPracticeIdResponse")]
        EnrollmentWorkflow.PayerManager.PracticePayerDetail[] GetPracticePayerDetailForPracticeId(long practiceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPayerManager/GetPracticePayerDetailForPracticeId", ReplyAction="http://tempuri.org/IPayerManager/GetPracticePayerDetailForPracticeIdResponse")]
        System.Threading.Tasks.Task<EnrollmentWorkflow.PayerManager.PracticePayerDetail[]> GetPracticePayerDetailForPracticeIdAsync(long practiceId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPayerManager/GetPracticePayerDetailForPracticeIdList", ReplyAction="http://tempuri.org/IPayerManager/GetPracticePayerDetailForPracticeIdListResponse")]
        EnrollmentWorkflow.PayerManager.PracticePayerDetail[] GetPracticePayerDetailForPracticeIdList(long[] practiceIdList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPayerManager/GetPracticePayerDetailForPracticeIdList", ReplyAction="http://tempuri.org/IPayerManager/GetPracticePayerDetailForPracticeIdListResponse")]
        System.Threading.Tasks.Task<EnrollmentWorkflow.PayerManager.PracticePayerDetail[]> GetPracticePayerDetailForPracticeIdListAsync(long[] practiceIdList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPayerManager/IsProviderIdRequired", ReplyAction="http://tempuri.org/IPayerManager/IsProviderIdRequiredResponse")]
        bool IsProviderIdRequired(int payerListId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPayerManager/IsProviderIdRequired", ReplyAction="http://tempuri.org/IPayerManager/IsProviderIdRequiredResponse")]
        System.Threading.Tasks.Task<bool> IsProviderIdRequiredAsync(int payerListId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPayerManager/IsGroupProviderIdRequired", ReplyAction="http://tempuri.org/IPayerManager/IsGroupProviderIdRequiredResponse")]
        bool IsGroupProviderIdRequired(int payerListId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPayerManager/IsGroupProviderIdRequired", ReplyAction="http://tempuri.org/IPayerManager/IsGroupProviderIdRequiredResponse")]
        System.Threading.Tasks.Task<bool> IsGroupProviderIdRequiredAsync(int payerListId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPayerManager/IsIndividualProviderIdRequired", ReplyAction="http://tempuri.org/IPayerManager/IsIndividualProviderIdRequiredResponse")]
        bool IsIndividualProviderIdRequired(int payerListId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPayerManager/IsIndividualProviderIdRequired", ReplyAction="http://tempuri.org/IPayerManager/IsIndividualProviderIdRequiredResponse")]
        System.Threading.Tasks.Task<bool> IsIndividualProviderIdRequiredAsync(int payerListId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPayerManagerChannel : EnrollmentWorkflow.PayerManager.IPayerManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PayerManagerClient : System.ServiceModel.ClientBase<EnrollmentWorkflow.PayerManager.IPayerManager>, EnrollmentWorkflow.PayerManager.IPayerManager {
        
        public PayerManagerClient() {
        }
        
        public PayerManagerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PayerManagerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PayerManagerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PayerManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void AddPracticePayer(string siteId, long practiceId, long payerListIds) {
            base.Channel.AddPracticePayer(siteId, practiceId, payerListIds);
        }
        
        public System.Threading.Tasks.Task AddPracticePayerAsync(string siteId, long practiceId, long payerListIds) {
            return base.Channel.AddPracticePayerAsync(siteId, practiceId, payerListIds);
        }
        
        public void AddPayerNotes(EnrollmentWorkflow.PayerManager.PayerNotes payerNotes) {
            base.Channel.AddPayerNotes(payerNotes);
        }
        
        public System.Threading.Tasks.Task AddPayerNotesAsync(EnrollmentWorkflow.PayerManager.PayerNotes payerNotes) {
            return base.Channel.AddPayerNotesAsync(payerNotes);
        }
        
        public void RemovePracticePayer(string siteId, long practiceId, long payerListId) {
            base.Channel.RemovePracticePayer(siteId, practiceId, payerListId);
        }
        
        public System.Threading.Tasks.Task RemovePracticePayerAsync(string siteId, long practiceId, long payerListId) {
            return base.Channel.RemovePracticePayerAsync(siteId, practiceId, payerListId);
        }
        
        public EnrollmentWorkflow.PayerManager.Payer[] GetPayerListData(string formType, string keywordFilter, string stateFilter, int pageNum, int numrows) {
            return base.Channel.GetPayerListData(formType, keywordFilter, stateFilter, pageNum, numrows);
        }
        
        public System.Threading.Tasks.Task<EnrollmentWorkflow.PayerManager.Payer[]> GetPayerListDataAsync(string formType, string keywordFilter, string stateFilter, int pageNum, int numrows) {
            return base.Channel.GetPayerListDataAsync(formType, keywordFilter, stateFilter, pageNum, numrows);
        }
        
        public long[] GetPracticePayerInfoForPracticeId(long practiceId) {
            return base.Channel.GetPracticePayerInfoForPracticeId(practiceId);
        }
        
        public System.Threading.Tasks.Task<long[]> GetPracticePayerInfoForPracticeIdAsync(long practiceId) {
            return base.Channel.GetPracticePayerInfoForPracticeIdAsync(practiceId);
        }
        
        public void AddPracticePayerDetail(string userName, string siteId, long practiceId, EnrollmentWorkflow.PayerManager.PracticePayerDetail[] payerdetails) {
            base.Channel.AddPracticePayerDetail(userName, siteId, practiceId, payerdetails);
        }
        
        public System.Threading.Tasks.Task AddPracticePayerDetailAsync(string userName, string siteId, long practiceId, EnrollmentWorkflow.PayerManager.PracticePayerDetail[] payerdetails) {
            return base.Channel.AddPracticePayerDetailAsync(userName, siteId, practiceId, payerdetails);
        }
        
        public EnrollmentWorkflow.PayerManager.PracticePayerDetail[] GetPracticePayerDetailForPracticeId(long practiceId) {
            return base.Channel.GetPracticePayerDetailForPracticeId(practiceId);
        }
        
        public System.Threading.Tasks.Task<EnrollmentWorkflow.PayerManager.PracticePayerDetail[]> GetPracticePayerDetailForPracticeIdAsync(long practiceId) {
            return base.Channel.GetPracticePayerDetailForPracticeIdAsync(practiceId);
        }
        
        public EnrollmentWorkflow.PayerManager.PracticePayerDetail[] GetPracticePayerDetailForPracticeIdList(long[] practiceIdList) {
            return base.Channel.GetPracticePayerDetailForPracticeIdList(practiceIdList);
        }
        
        public System.Threading.Tasks.Task<EnrollmentWorkflow.PayerManager.PracticePayerDetail[]> GetPracticePayerDetailForPracticeIdListAsync(long[] practiceIdList) {
            return base.Channel.GetPracticePayerDetailForPracticeIdListAsync(practiceIdList);
        }
        
        public bool IsProviderIdRequired(int payerListId) {
            return base.Channel.IsProviderIdRequired(payerListId);
        }
        
        public System.Threading.Tasks.Task<bool> IsProviderIdRequiredAsync(int payerListId) {
            return base.Channel.IsProviderIdRequiredAsync(payerListId);
        }
        
        public bool IsGroupProviderIdRequired(int payerListId) {
            return base.Channel.IsGroupProviderIdRequired(payerListId);
        }
        
        public System.Threading.Tasks.Task<bool> IsGroupProviderIdRequiredAsync(int payerListId) {
            return base.Channel.IsGroupProviderIdRequiredAsync(payerListId);
        }
        
        public bool IsIndividualProviderIdRequired(int payerListId) {
            return base.Channel.IsIndividualProviderIdRequired(payerListId);
        }
        
        public System.Threading.Tasks.Task<bool> IsIndividualProviderIdRequiredAsync(int payerListId) {
            return base.Channel.IsIndividualProviderIdRequiredAsync(payerListId);
        }
    }
}
