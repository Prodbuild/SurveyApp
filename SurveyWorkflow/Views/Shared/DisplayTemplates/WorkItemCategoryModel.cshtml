@using EnrollmentWorkflow.Enums
@using System.ComponentModel;
@using EnrollmentWorkflow.Helpers
@using EnrollmentWorkflow.Models
@using Kendo.Mvc.UI
@model WorkItemCategoryModel


<div class="col-md-6">
    <div class="panel panel-default">
        <div class="panel-heading">
            @Model.Category
        </div>
        <div class="panel-body">

            @if (@Model.Category == SelectListHelper.GetEnumStringValue(WorkItemStatus.PendingInitialLogin) ||
                 @Model.Category == SelectListHelper.GetEnumStringValue(WorkItemStatus.PendingSubmission) ||
                 @Model.Category == SelectListHelper.GetEnumStringValue(WorkItemStatus.PendingTPSReview) ||
                 @Model.Category == SelectListHelper.GetEnumStringValue(WorkItemStatus.HoldForFutureGoLiveDate) ||
                 @Model.Category == SelectListHelper.GetEnumStringValue(WorkItemStatus.ProcessingEnrollment) ||
                 @Model.Category == SelectListHelper.GetEnumStringValue(WorkItemStatus.PendingPaperwork)
                )
            {
                <input type="hidden" name="categoryId" value="@Model.Id" />
                @(Html.Kendo().Grid<WorkItemModel>().Name("workItemGridQueue" + @Model.Id)
                          .AutoBind(false).DataSource(data => data
                              .Ajax()
                              .Model(model =>
                              {
                                  model.Id(w => w.Id);
                                  model.Field(w => w.SiteId).Editable(false);
                                  model.Field(w => w.GoLiveDate).Editable(false);

                                  if (@Model.Category == SelectListHelper.GetEnumStringValue(WorkItemStatus.PendingInitialLogin))
                                  {
                                      model.Field(w => w.Vendor).Editable(false);
                                      model.Field(w => w.KickOffCallDate).Editable(false);
                                  }
                                  if (@Model.Category == SelectListHelper.GetEnumStringValue(WorkItemStatus.PendingSubmission))
                                  {
                                      model.Field(w => w.Vendor).Editable(false);
                                      model.Field(w => w.DaysToImplement).Editable(false);
                                  }
                                  if (@Model.Category == SelectListHelper.GetEnumStringValue(WorkItemStatus.HoldForFutureGoLiveDate))
                                  {
                                      model.Field(w => w.Vendor).Editable(false);
                                      model.Field(w => w.EnrollmentSentToThirdParty).Editable(false);
                                  }
                                  if (@Model.Category == SelectListHelper.GetEnumStringValue(WorkItemStatus.PendingTPSReview))
                                  {
                                      model.Field(w => w.ClientSubmissionDate).Editable(false);
                                      model.Field(w => w.DaysToImplement).Editable(false);
                                  }
                                  if (@Model.Category == SelectListHelper.GetEnumStringValue(WorkItemStatus.ProcessingEnrollment) ||
                                      @Model.Category == SelectListHelper.GetEnumStringValue(WorkItemStatus.PendingPaperwork))
                                  {
                                      model.Field(w => w.EnrollmentSentToThirdParty).Editable(false);
                                      model.Field(w => w.ClientSubmissionDate).Editable(false);

                                  }
                                  model.Field(w => w.LastContacted).Editable(false);

                              })
                             .Read(readAction => readAction.Action("LoadWorkItems", "Home", new { category = Model.Category })
                                    .Data("currentDataQueue")
                              )
                          )
                          .Columns(columns =>
                          {

                              columns.Bound(col => col.Id).Hidden(true);
                              columns.Bound(col => col.SiteId).Title("Site Id");
                              columns.Bound(col => col.GoLiveDate).Format("{0:MM/dd/yyyy}").Title("Go-Live Date");
                              if (@Model.Category == SelectListHelper.GetEnumStringValue(WorkItemStatus.PendingInitialLogin))
                              {
                                  columns.Bound(col => col.Vendor).Title("Vendor");
                                  columns.Bound(col => col.KickOffCallDate).Format("{0:MM/dd/yyyy}").Title("Kick Off Call Date");
                              }
                              if (@Model.Category == SelectListHelper.GetEnumStringValue(WorkItemStatus.PendingSubmission))
                              {
                                  columns.Bound(col => col.Vendor).Title("Vendor");
                                  columns.Bound(col => col.DaysToImplement).Title("Days To Implement");
                              }
                              if (@Model.Category == SelectListHelper.GetEnumStringValue(WorkItemStatus.HoldForFutureGoLiveDate))
                              {
                                  columns.Bound(col => col.Vendor).Title("Vendor");
                                  columns.Bound(col => col.EnrollmentSentToThirdParty).Format("{0:MM/dd/yyyy}").Title("Sent To Madaket Date");
                              }
                              if (@Model.Category == SelectListHelper.GetEnumStringValue(WorkItemStatus.PendingTPSReview))
                              {
                                  columns.Bound(col => col.ClientSubmissionDate).Title("Client Submission Date");
                                  columns.Bound(col => col.DaysToImplement).Title("Days To Implement");
                              }
                              if (@Model.Category == SelectListHelper.GetEnumStringValue(WorkItemStatus.ProcessingEnrollment) ||
                                  @Model.Category == SelectListHelper.GetEnumStringValue(WorkItemStatus.PendingPaperwork))
                              {
                                  columns.Bound(col => col.EnrollmentSentToThirdParty).Format("{0:MM/dd/yyyy}").Title("Sent To Madaket Date");
                                  columns.Bound(col => col.ClientSubmissionDate).Format("{0:MM/dd/yyyy}").Title("Client Submission Date");
                              }
                              columns.Bound(col => col.LastContacted).Format("{0:MM/dd/yyyy}").Title("Last Contacted");
                              columns.Template(@<text></text>).Title("");
                          })
                                                                                .Sortable(sort => sort.AllowUnsort(false).SortMode(GridSortMode.SingleColumn))
                                                                                .Scrollable()
                                                                                .Editable(m => m.Mode(GridEditMode.InCell))
                                                                                                .Pageable(pg => pg
                                                                                                    .Refresh(true)
                                                                                                    .PageSizes(new[] { 25, 50, 100 })
                                                                                                    .ButtonCount(5))
                )}


            else
            {
                <input type="hidden" name="categoryId" value="@Model.Id" />
                @(Html.Kendo().Grid<WorkItemModel>().Name("workItemGridQueue" + @Model.Id)
                          .AutoBind(false).DataSource(data => data
                              .Ajax()
                              .Model(model =>
                              {
                                  model.Id(w => w.Id);
                                  model.Field(w => w.SiteId).Editable(false);
                                  model.Field(w => w.GoLiveDate).Editable(false);
                                  model.Field(w => w.DaysToImplement).Editable(false);
                                  if (ViewBag.IsAdmin == false)
                                  {
                                      model.Field(w => w.EnrollmentRep).Editable(false);
                                  }
                              })
                             .Read(readAction => readAction.Action("LoadWorkItems", "Home", new { category = Model.Category })
                                    .Data("currentDataQueue")
                              )
                          )
                          .Columns(columns =>
                          {
                              columns.Bound(col => col.Id).Hidden(true);
                              columns.Bound(col => col.SiteId).Title("Site Id").Width(75);
                              columns.Bound(col => col.GoLiveDate).Format("{0:MM/dd/yyyy}").Title("Go-Live Date").Width(120);
                              columns.Bound(col => col.DaysToImplement).Title("Days To Implement").Width(140);
                              columns.Bound(col => col.EnrollmentRep).EditorTemplateName("EnrollmentRepDropDown").ClientTemplate("#if(EnrollmentRep == ''){# Unassigned #}else{#  #= EnrollmentRep # #}#");
                              columns.Template(@<text></text>).Title("");
                          })
                                                                                        .Sortable(sort => sort.AllowUnsort(false).SortMode(GridSortMode.SingleColumn))
                                                                                        .Scrollable()
                                                                                        .Editable(m => m.Mode(GridEditMode.InCell))
                                                                                                        .Pageable(pg => pg
                                                                                                            .Refresh(true)
                                                                                                            .PageSizes(new[] { 25, 50, 100 })
                                                                                                            .ButtonCount(5))
                )}
        </div>
    </div>
</div>